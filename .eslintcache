[{"/Users/omeruysal/Desktop/react-spring/frontend/src/index.js":"1","/Users/omeruysal/Desktop/react-spring/frontend/src/reportWebVitals.js":"2","/Users/omeruysal/Desktop/react-spring/frontend/src/pages/UserSignupPage.js":"3","/Users/omeruysal/Desktop/react-spring/frontend/src/api/apiCalls.js":"4","/Users/omeruysal/Desktop/react-spring/frontend/src/components/Input.js":"5","/Users/omeruysal/Desktop/react-spring/frontend/src/pages/LoginPage.js":"6","/Users/omeruysal/Desktop/react-spring/frontend/src/components/ButtonWithProgress.js":"7","/Users/omeruysal/Desktop/react-spring/frontend/src/shared/ApiProgress.js":"8","/Users/omeruysal/Desktop/react-spring/frontend/src/container/App.js":"9","/Users/omeruysal/Desktop/react-spring/frontend/src/pages/HomePage.js":"10","/Users/omeruysal/Desktop/react-spring/frontend/src/pages/UserPage.js":"11","/Users/omeruysal/Desktop/react-spring/frontend/src/components/TopBar.js":"12","/Users/omeruysal/Desktop/react-spring/frontend/src/shared/AuthenticationContext.js":"13","/Users/omeruysal/Desktop/react-spring/frontend/src/components/ProfileCard.js":"14","/Users/omeruysal/Desktop/react-spring/frontend/src/redux/ConfigureStore.js":"15","/Users/omeruysal/Desktop/react-spring/frontend/src/redux/authReducer.js":"16","/Users/omeruysal/Desktop/react-spring/frontend/src/redux/authActions.js":"17","/Users/omeruysal/Desktop/react-spring/frontend/src/redux/Constants.js":"18","/Users/omeruysal/Desktop/react-spring/frontend/src/components/UserList.js":"19","/Users/omeruysal/Desktop/react-spring/frontend/src/components/UserListItem.js":"20","/Users/omeruysal/Desktop/react-spring/frontend/src/pages/LoginPageWithoutThunk.js":"21","/Users/omeruysal/Desktop/react-spring/frontend/src/components/ProfileImageWithDefault.js":"22","/Users/omeruysal/Desktop/react-spring/frontend/src/components/TwitSubmit.js":"23","/Users/omeruysal/Desktop/react-spring/frontend/src/components/TwitFeed.js":"24","/Users/omeruysal/Desktop/react-spring/frontend/src/components/TwitView.js":"25","/Users/omeruysal/Desktop/react-spring/frontend/src/components/AutoUploadImage.js":"26"},{"size":605,"mtime":1610623334792,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1608969055463,"results":"29","hashOfConfig":"28"},{"size":5543,"mtime":1611403781173,"results":"30","hashOfConfig":"28"},{"size":2585,"mtime":1612155489440,"results":"31","hashOfConfig":"28"},{"size":703,"mtime":1611843370077,"results":"32","hashOfConfig":"28"},{"size":3046,"mtime":1612024652372,"results":"33","hashOfConfig":"28"},{"size":521,"mtime":1612163728813,"results":"34","hashOfConfig":"28"},{"size":1601,"mtime":1610201982178,"results":"35","hashOfConfig":"28"},{"size":1884,"mtime":1611072712712,"results":"36","hashOfConfig":"28"},{"size":796,"mtime":1611988552397,"results":"37","hashOfConfig":"28"},{"size":2230,"mtime":1612015352764,"results":"38","hashOfConfig":"28"},{"size":5401,"mtime":1612088933219,"results":"39","hashOfConfig":"28"},{"size":1137,"mtime":1610457342017,"results":"40","hashOfConfig":"28"},{"size":7915,"mtime":1612118340092,"results":"41","hashOfConfig":"28"},{"size":1838,"mtime":1611501173423,"results":"42","hashOfConfig":"28"},{"size":1238,"mtime":1611936142305,"results":"43","hashOfConfig":"28"},{"size":1721,"mtime":1611934436358,"results":"44","hashOfConfig":"28"},{"size":143,"mtime":1611934097189,"results":"45","hashOfConfig":"28"},{"size":2746,"mtime":1612024042801,"results":"46","hashOfConfig":"28"},{"size":595,"mtime":1612024068416,"results":"47","hashOfConfig":"28"},{"size":2632,"mtime":1611072585411,"results":"48","hashOfConfig":"28"},{"size":1270,"mtime":1611583833584,"results":"49","hashOfConfig":"28"},{"size":4346,"mtime":1612163929134,"results":"50","hashOfConfig":"28"},{"size":4593,"mtime":1612118056201,"results":"51","hashOfConfig":"28"},{"size":1437,"mtime":1612079182582,"results":"52","hashOfConfig":"28"},{"size":615,"mtime":1612162797879,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"374ga",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"120"},"/Users/omeruysal/Desktop/react-spring/frontend/src/index.js",[],["121","122"],"/Users/omeruysal/Desktop/react-spring/frontend/src/reportWebVitals.js",[],"/Users/omeruysal/Desktop/react-spring/frontend/src/pages/UserSignupPage.js",[],"/Users/omeruysal/Desktop/react-spring/frontend/src/api/apiCalls.js",[],"/Users/omeruysal/Desktop/react-spring/frontend/src/components/Input.js",[],"/Users/omeruysal/Desktop/react-spring/frontend/src/pages/LoginPage.js",["123","124","125"],"import React, { Component } from 'react'\nimport Input from '../components/Input'\nimport { login } from '../api/apiCalls'\nimport ButtonWithProgress from '../components/ButtonWithProgress'\nimport { connect } from 'react-redux'\nimport {loginHandler, loginSuccess} from '../redux/authActions'\nimport { useEffect, useState } from \"react\";\n//import {Authentication} from '../shared/AuthenticationContext';\n\nconst LoginPage = (props) => {\n    //const dispatch = useDispatch() ---->  useDispatch ile hook kullanarak connect kullanmadan da redux dispatch kullanim ornegi\n    // const {isLoggedIn} =useSelector(function(store){ -----> useSelector ile hook kulanarak store'a erisim saglariz\n    //     return{\n    //         isLoggedIn : store.isLoggedIn\n    //     }\n    // })\n\n    const [username, setUserName] = useState();\n    const [password, setPassword] = useState();\n    const [error, setError] = useState();//login sayfasinda tek error gosteririz.Sifre ya da username'in yanlis oldugu hakkinda bir bilgi vermeyiz tek tek\n\n    useEffect(()=> { //username veya passwordda herhangi bir degisim oldugunda erroru nulla cekeriz\n        setError(null);\n    },[username,password])\n  \n   \n\n    const   onClickLogin = async event => {\n        event.preventDefault();\n        const {history , dispatch} = props;\n        const credentials = { //login methodu icin objemizi olustururuz.Bu obje username ve sifre barindirir.\n            username,\n            password\n        }\n         setError(null) //login dendigi anda error uyarisi ekrandan silinmesi icin\n        \n        try {\n          await dispatch(loginHandler(credentials)) // loginHandler bize fonksiyon doner.Bu fonksiyonu isleyecek bir ara katman lazim. Bu yuzden thunk kutuphanesini indiririz.\n\n        history.push(\"/\")//Anasayfaya yonlendirme\n        } catch (apiError) {\n           \n        setError(apiError.response.data.message)\n           \n        }\n    }\n        const {pendingApiCall} =props;\n        const buttonEnabled = username && password; //username ve password bos ise butona basilmaz\n        return (\n            <div className=\"container\">\n                <form>\n                    <h1 className=\"text-center\">Login</h1>\n                    <Input label=\"Username\" name=\"username\" onChange={(event)=>{setUserName(event.target.value)}} />\n                    <Input label=\"Password\" name=\"password\" type=\"password\" onChange={event=>{setPassword(event.target.value)}} />\n                    {error ? <div className=\"alert alert-danger\" >\n                        {error}\n                    </div> : \"\"}\n                    \n                    <div className=\"text-center\">\n                        <ButtonWithProgress\n                        onClick={onClickLogin}\n                        disabled={!buttonEnabled|| pendingApiCall}\n                        pendingApiCall={pendingApiCall}\n                        text={'Login'}\n                        />\n                    </div>\n                </form>\n\n            </div>\n        )\n    }\n\n\nexport default connect()(LoginPage);","/Users/omeruysal/Desktop/react-spring/frontend/src/components/ButtonWithProgress.js",["126"],"import React from 'react'\n\nexport default function ButtonWithProgress(props) {\n    const {onClick,pendingApiCall,disabled,text,className} =props;\n    return (\n            <button className={className ||\"btn btn-primary\"} onClick={onClick} disabled={disabled} > \n                {pendingApiCall ? <span className=\"spinner-border spinner-border-sm\"></span> : ''}\n    {text}\n</button>\n    )\n}\n{ //Burada buttonlarimiz icin genel bir componenet yaratiriz.State tutmasina gerek olmadigi icin functional component olustururuz\n}","/Users/omeruysal/Desktop/react-spring/frontend/src/shared/ApiProgress.js",[],"/Users/omeruysal/Desktop/react-spring/frontend/src/container/App.js",["127","128"],"import React, { Component } from 'react'\nimport ApiProgress from '../shared/ApiProgress'\nimport UserSignupPage from '../pages/UserSignupPage'\nimport Login from '../pages/LoginPage'\nimport LoginPageWithoutThunk from '../pages/LoginPageWithoutThunk'\nimport HomePage from '../pages/HomePage'\nimport UserPage from '../pages/UserPage'\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom'\nimport TopBar from '../components/TopBar'\nimport {connect} from 'react-redux';\n//import {Authentication} from '../shared/AuthenticationContext';\n\n\nclass App extends Component {\n// Functional componenetlerde useSelector ile redux store'a erisim:\n// const { isLoggedIn} = useSelector(store=>({\n//  isLoggedIn : store.isLoggedIn }))\n  render() {\n    const {isLoggedIn} = this.props;\n    \n    return (\n\n      <div className=\"row\">\n        <div className=\"col\">\n\n          <HashRouter>{/*BrowserRouter yerine hashrouter kullandik cunku sayfalar arasinda gecis yaparken backende request atamadan gecis yapmak icin hashrouter kullanmamiz gerek*/}\n            <TopBar />\n            <Switch>\n\n\n              <Route exact path=\"/\" component={HomePage} />\n\n             {!isLoggedIn && <Route path=\"/login\" component={Login}/>} {/*eger kullanici logged in olduysa login sayfasini gormemesi icin yapilan kosul*/}\n           \n              <Route path=\"/signup\" component={UserSignupPage} />\n              <Route path=\"/user/:username\" component={UserPage} />\n              <Redirect to=\"/\" />\n\n            </Switch>\n          </HashRouter>\n\n\n        </div>\n\n      </div>\n    )\n\n  }\n\n}\nconst mapStateToProps = (store) => { //reduxtaki state bilgisini componentimize props olarak alacagimiz fonksiyon yaziyoruz.Bu fonksiyou redux tarafi cagiriyor olucak.Parametre olan store objesi reduxtan geliyor\n  return {\n     isLoggedIn : store.isLoggedIn\n  }\n}\n\nexport default connect(mapStateToProps)(App)","/Users/omeruysal/Desktop/react-spring/frontend/src/pages/HomePage.js",[],"/Users/omeruysal/Desktop/react-spring/frontend/src/pages/UserPage.js",["129"],"import React, { useState, useEffect } from 'react'\nimport ProfileCard from '../components/ProfileCard'\nimport { getUser } from '../api/apiCalls'\nimport { useParams } from 'react-router-dom'\nimport TwitFeed from '../components/TwitFeed';\n//useEffect sayesinde belirledigimiz itemda bir degisiklik oldugunda calisir. Ya da componenette her degisim oldugunda. Bu bize kalmis.\nfunction UserPage(props) {\n    const [user, setUser] = useState({}); //iceriye suslu parantez koyduk cunku koymazsak ve profile card componenti yuklendiginde ilk basta(daha backend'ten user gelmeden once) user undefined olur ve propstan undefined bir objenin username'ini almaya calistigimizdan dolayi hata cikar. Parantezler sayesinde user objesi undefined olmaz icindeki filedler undefined olur\n    const [notFound, setNotFound] = useState(false);\n    const { username } = props.match.params  //esitligin sag tarafi yerine useParams() fonksiyonu kullanabilir. App.js teki path=\"/user/:username\" :usernameini getirir\n    useEffect(() => {\n\n        const loadUser = async () => {\n            try {\n                const response = await getUser(username)\n                setUser(response.data)\n                setNotFound(false)\n            } catch (error) {\n                setNotFound(true)\n            }\n        }\n        loadUser();\n    }, [username])  //username degiskeni degistikce useEffect fonksiyonu calisacak. Buradaki username hangi userin sayfasindaysak o userin usernameidir.\n    if (notFound) {\n        return (\n            <div className=\"container\">\n                <div className=\"alert alert-danger text-center\">\n                    <div>\n                        <span className=\"material-icons\" style={{fontSize:'48px'}}>\n                            error\n                        </span>\n                    </div>   User not found\n           </div>\n            </div>\n        )\n    }\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col\">\n                     <ProfileCard user={user} />\n                </div>\n                <div className=\"col\">\n                    <TwitFeed/>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default UserPage;","/Users/omeruysal/Desktop/react-spring/frontend/src/components/TopBar.js",["130"],"import React, { Component, useState,useEffect ,useRef} from 'react'\nimport logo from '../assets/images.png'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { logoutSuccess } from '../redux/authActions'\nimport ProfileImageWithDefault from './ProfileImageWithDefault'\n//import {Authentication} from '../shared/AuthenticationContext';\n\n\nconst TopBar = (props) => {\n    const [menuVisible , setMenuVisible] = useState(false);\n    const menuArea = useRef(null);//Login oldugumuz yerin html kodu temsil edebilmek icin referans yaratiriz.(Dropdown listeden baska bir yere tikladigimizi anlayip kapatabilmek icin kullaniriz)\n   \n    // onClickLogout = () => {  // bu sekilde de store'a mudahele edebiliriz\n\n    //     this.props.dispatch(logoutSuccess());\n    // }\n\n     const { isLoggedIn, username, displayName, image } = props;\n    useEffect(()=>{\n        document.addEventListener('click',menuClickTracker);\n\n        return()=>{\n            document.removeEventListener('click',menuClickTracker)\n        }\n    },[isLoggedIn])//sadece login durumunda (sadece kullanici login oldugunda nereye tikladigini inceleriz)degistiginde cagiririz, yoksa componentler icin surekli calisir, performans acisindan yanlis\n   \n    const menuClickTracker = (event)=>{\n       if( menuArea.current ===null || !menuArea.current.contains(event.target)){//menuArea.current logout durumdayken gozukmez.Bu yuzden null olma ihtimalinide kullanmazsak hata firlatir\n           setMenuVisible(false)\n       }\n    }\n\n\n\n     let links = (\n            <ul className=\"navbar-nav ml-auto\" >\n                <li>\n                    <Link className=\"nav-link\" to=\"/login\">\n                        Login\n        </Link>\n                </li>\n                <li>\n                    <Link className=\"nav-link\" to=\"/signup\">\n                        Sign Up\n        </Link>\n                </li>\n            </ul>\n        );\n        if (isLoggedIn) {\n\n\n            let dropDownClass = 'dropdown-menu p-0 shadow';\n            if(menuVisible){ //dropdown menuye tiklandiginda menuVisible true olur. Bu kosula girer ve dropdown listesinin styleina show ekleriz\n                dropDownClass += ' show';\n            }\n\n\n            links = (\n                <ul className=\"navbar-nav ml-auto\" ref={menuArea}>\n                    <li className=\"nav-item dropdown\">\n                        <div className=\"d-flex\" style={{cursor : 'pointer'}} onClick={()=>setMenuVisible(true)}>\n\n                            <ProfileImageWithDefault image={image} width=\"32\" height=\"32\" className=\"rounded-circle m-auto\" />\n                            <span className=\"nav-link dropdown-toggle\">{displayName}</span>\n                        </div>\n                        <div className={dropDownClass}>\n\n                         \n                                <Link className=\"dropdown-item d-flex p-2\" to={`/user/${username}`} onClick={()=>setMenuVisible(false)}>\n                                <span className=\"material-icons text-info mr-2\">person</span>\n                                    My profile\n                                </Link>\n                            \n                            \n                                \n                                    <span className=\"dropdown-item d-flex p-2\" onClick={props.onLogoutSuccess}>\n                                    <span className=\"material-icons text-danger mr-2\">power_settings_new</span>\n                                      <span style={{cursor : 'pointer'}}> Logout</span>  \n                                    </span>\n                                \n                           \n\n                        </div>\n                    </li>\n\n                </ul>\n            )\n        }\n        return (\n            <div className=\"shadow-sm mb-2 \">\n                <nav className=\"navbar navbar-light bg-light container navbar-expand\">\n\n                    <Link className=\"navbar-brand\" to=\"/\">\n                        <img src={logo} width=\"60\" alt=\"TopBar Logo\" />\n        TOPBAR\n</Link>\n                    {links}\n                </nav>\n\n            </div>\n        )\n\n\n    }\n\nconst mapStateToProps = (store) => { //reduxtaki state bilgisini componentimize props olarak alacagimiz fonksiyon yaziyoruz.Bu fonksiyou redux tarafi cagiriyor olucak.Parametre olan store objesi reduxtan geliyor\n    return {\n        username: store.username,\n        isLoggedIn: store.isLoggedIn,\n        displayName: store.displayName,\n        image: store.image\n    }\n}\nconst mapDispatchToProps = dispatch => { //reduxtaki dispatch fonskiyonunu aliriz //bu sekilde tanimlama yaptik dispatch bizim propsumuz olmaktan cikar ve yerine asagida tanimladigimiz keywordteki fonksiyonlar gelir. ornegin onlogoutsuccess\n    return {\n        onLogoutSuccess: () => dispatch(logoutSuccess())//logoutSuccess fonksiyonunu authActionsda olusturduk. Bize json doner. Burada onLogoutSuccess fonksiyonunu tanimlamis oluruz.\n\n    };\n}\n// const dispatch = useDispatch(); // hook ile dispatch kullanimina alternatif bir yontem\n// const onLogoutSuccess=()=>{\n//     dispatch(logoutSuccess())\n// }\nexport default connect(mapStateToProps, mapDispatchToProps)(TopBar); //connect olurken reduxtan neyi alicagimizla ilgili opsiyonlar sunar\n                                                                    //reduxun dispatch fonksiyonunun props olarak bu componeneti donusturulmesi diyebiliriz","/Users/omeruysal/Desktop/react-spring/frontend/src/shared/AuthenticationContext.js",["131","132"],"import React, { Component } from 'react'\n\nexport const Authentication = React.createContext();\n\nclass AuthenticationContext extends Component {\n    state = {\n        isLoggedIn: false,\n        username: undefined,\n        displayName: undefined,\n        image: undefined,\n        password: undefined\n      }\n      onLoginSuccess = authState => {\n        this.setState({\n          ... authState,//authStateteki tum fieldlar bu sekilde statelerimize gonderilir ve tek tek username: authState.username diye atamamiza gerek kalmaz\n          isLoggedIn: true\n        });\n      };\n      onLogoutSuccess = () => {\n        this.setState({\n          username : undefined,\n          isLoggedIn: false\n        });\n      };\n    \n    render() {\n        return (\n                <Authentication.Provider value={{\n                    state: {... this.state},\n                    onLoginSuccess : this.onLoginSuccess,\n                    onLogoutSuccess : this.onLogoutSuccess\n\n                }}>\n                    {this.props.children}\n                </Authentication.Provider>\n           \n        )\n    }\n}\n \n  export default AuthenticationContext;",["133","134"],"/Users/omeruysal/Desktop/react-spring/frontend/src/components/ProfileCard.js",["135"],"import React,{useEffect, useState}from 'react'\nimport { withRouter } from 'react-router-dom'\nimport {useSelector, useDispatch} from 'react-redux'\nimport ProfileImageWithDefault from './ProfileImageWithDefault'\nimport Input from '../components/Input'\nimport {updateUser} from '../api/apiCalls'\nimport ButtonWithProgress from '../components/ButtonWithProgress'\nimport { updateSuccess } from '../redux/authActions'\n//import { Authentication } from '../shared/AuthenticationContext'\n\nconst ProfileCard = (props) => {\n    const [inEditMode, setInEditMode] = useState(false); //edit moda girip cikmamizi saglar\n    const[validationErrors,setValidationErrors] = useState({});\n    const [updatedDisplayName , setUpdatedDisplayName] = useState();\n    const[editable,setEditable] = useState(false);\n    const pathUsername = props.match.params.username; //profilinde oldugumuz kisinin username'ini aliriz URLdem\n    const [user,setUser] =useState({});\n    const [newImage,setNewImage] = useState();\n    const {username : loggedInUsername} = useSelector(store=>({username : store.username}))\n    const dispatch = useDispatch();\n    \n    useEffect(()=>{\n        setEditable(pathUsername === loggedInUsername); //Userin kendi sayfasinda olup olmadigina bakariz. Buna gore editable'i guncelleriz ve sonucunda edit butonu gorunur ya da gozukmez\n\n    },[pathUsername,loggedInUsername])//Profil linkindeki isim ya da redux storedaki usernamede degisiklik olursa editable ozelligi guncellenir\n\n    useEffect(()=>{ //propstaki userda degisiklik oldukca bizim bu classtaki user objemizi set ederiz.Logout oldugunda undefined olur giris yaptiginda bilgiler atanir\n        setUser(props.user);\n    },[props.user])\n    \n    const {username,displayName,image} = user;\n\n\n    useEffect(()=>{\n\n        if(!inEditMode){//edit moddan ciktiginda\n\n            setUpdatedDisplayName(undefined)//edit moddan her ciktigimizda input degerini undefined'a cekeriz.Eger cekmezsek. kullanici edit diyip vazgecip sonra tekrar edit derse, ikinci kez edite tikladigimizda input degeri ilk seferdeki degeri tutar\n            setNewImage(undefined)\n        }else{//edit moda girdiginde\n\n            setUpdatedDisplayName(displayName);//edit moda her tikladigimizda input degeri displayName olur\n        }\n\n    },[inEditMode])//inEditMode degiskeninde olan her degisiklikten sonra burasi render olucak.\n\n\n    useEffect(()=>{\n        setValidationErrors(previousValidationErrors=>({\n            ...previousValidationErrors,\n            displayName:undefined\n        }))\n    },[updatedDisplayName]) // displayName'i editlemek istiyoruz fakat validationdan hata geldi ve input altinda hata yazdirildi.\n                    //inputa (yani updatedDisplayName) yeni bir degisiklik yapildiginda hatayi ekrandan kaldir.Bu islemi asagida setUpdatedDisplayName icin onChange fonksiyonu kullandigimiz yerde de yapabilirdik\n    \n    useEffect(()=>{ //imagete herhangi bir degisiklik oldugunda hatayi undefineda cekeriz. Boyle hata varsa ekrandan silinir yoksa bir degisiklik olmaz\n        setValidationErrors(previousValidationErrors=>({\n            ...previousValidationErrors,\n            image:undefined\n        }))\n    },[newImage])\n\n\n\n    const onClickSave= async()=>{\n        let image;\n        if(newImage){ //eger newImage undefined ise bolmeye calismayiz. ProfileImageWithDefault componentine newImage(undefined) ve image(dbden ggelen) gonderilir\n            image=newImage.split(',')[1] //image olarak sadece base64 ile kodlanmis kismi gondeririz. Kesmeden once \"data:image/jpeg;base64,\" diye olusan kismi keseriz\n       \n        }\n       const body = {\n           displayName : updatedDisplayName,\n           image\n         }\n        try {\n         const response = await updateUser(username, body)\n         setInEditMode(false);//update sonrasi edit mod kapatiriz\n         setUser(response.data);//update sonrasi bulundugumuz componentteki useri guncelleriz\n         dispatch(updateSuccess(response.data))// basarili bir sekilde update gerceklestikten sonra yeni displayName ve image reduxa yansitiriz\n            console.log(\"response data ProfileCArd : \")\n            console.log(response.data)\n        } catch (error) {\n            setValidationErrors(error.response.data.validationErrors);//backendden gonderdigimiz validationErrors dizini burada yakalariz\n        }\n    }\n    \n    const onChangeFile = (event) =>{\n        if(event.target.files.length<1){ //bu kontrolu yapmazsak su kisimda hata cikar; kullanici edit>choose file dedi fotograf secti tekrar choose file dedi ve fotograf secmeden cancel dedi.\n            return;\n        }\n\n        const file = event.target.files[0];//coklu resim olmadigimiz icin dizinin ilk elemani istedigimiz fotografi temsil eder\n        \n        const fileReader = new FileReader(); //resmi almak icin fileReader olusturuz\n        fileReader.onloadend = () =>{\n            setNewImage(fileReader.result)//resmi statimize set ederiz\n        }\n        fileReader.readAsDataURL(file);//base64 stringi olusur\n    }\n              \n              return  <div className=\"card text-center\">\n                  <div className=\"card-header\">\n                  <ProfileImageWithDefault \n                  className=\"rounded-circle shadow\" width=\"200\" height=\"200\"\n                   alt={`${username} profile`} image={image}\n                   tempimage={newImage}/>\n\n                  </div>\n                    <div className=\"card-body\">\n            {!inEditMode && \n            (   \n                <> {/*soldaki tanimlama react fragment gosterimdir.Jsx sadece bir root element dondugunden dolayi bu gosterimi yapmazsak hata aliriz*/}\n                <h3>\n                    {username}\n                  </h3>\n                  <h5>\n                            @{displayName}\n                  </h5>\n                 { editable &&  <button className=\"btn btn-success d-inline-flex\" onClick={()=>setInEditMode(true)}>\n                        <span className=\"material-icons\">create</span>  \n                        Edit\n                     </button>\n                     }\n                 </>    \n            )\n            } \n            {inEditMode && (\n                <div>\n                    <Input label=\"Change display name\" defaultValue={displayName} error={validationErrors.displayName}\n                    onChange={(event)=>{setUpdatedDisplayName(event.target.value);}}/>\n                    <Input type=\"file\" onChange={onChangeFile} error={validationErrors.image}/>\n                    <ButtonWithProgress className=\"btn btn-primary d-inline-flex\" onClick={onClickSave}\n                       text={\n                           <>   <span className=\"material-icons\">save</span>\n                           Save\n                           </>\n                       }  \n                    />\n                    <ButtonWithProgress className=\"btn btn-light d-inline-flex ml-2\" onClick={()=>setInEditMode(false)}\n                        text={\n                            <> \n                            <span className=\"material-icons\">cancel</span>\n                            Cancel\n                            </>\n                        }   \n                    />\n                </div>\n            )\n\n            }  \n              </div>\n\n                </div>\n\n    // return (\n\n    //     <Authentication.Consumer> {/*functional componenet oldugu icin static context type set edemeiyoruz.Bu yuzden Authentication.Consumer kullaniriz*/}\n    //         {value => {\n    //     const pathUsername = props.match.params.username;\n    //     const loggedInUsername = value.state.username;\n    //     let message = \"We can not edit\";\n    //     if (pathUsername === loggedInUsername) {\n    //         message = \"We can edit\"\n    //     }\n    //   return  <div>\n    //         {message}\n    //     </div>\n    //         }}\n    //     </Authentication.Consumer>\n\n\n\n    // )\n}\n\n\nexport default withRouter(ProfileCard);","/Users/omeruysal/Desktop/react-spring/frontend/src/redux/ConfigureStore.js",[],"/Users/omeruysal/Desktop/react-spring/frontend/src/redux/authReducer.js",[],"/Users/omeruysal/Desktop/react-spring/frontend/src/redux/authActions.js",[],"/Users/omeruysal/Desktop/react-spring/frontend/src/redux/Constants.js",[],"/Users/omeruysal/Desktop/react-spring/frontend/src/components/UserList.js",["136","137"],"import React, { Component } from 'react'\nimport {getUsers} from '../api/apiCalls'\nimport UserListItem from '../components/UserListItem'\nimport { useEffect, useState, useSelector } from \"react\";\nimport {connect} from 'react-redux'\n\nconst UserList = (props)=> {\n    const [page, setPage] =useState({//page objemiz bize responseta donen ile ayni yapidadir yani content size ve number barindirir response gibi\n        content : [], //content icinde backend'ten objelerimiz gelir\n        size: 3,\n        number : 0 //number sifirsa ilk sayfadayiz demektir.\n    })\n\n    const [loadFailure, setLoadFailure] = useState(false)\n    useEffect(() => {\n        loadUsers();\n    }, [])//useEffect sonuna bos array ekledigimizde sadece componentDidMount gibi calisir\n\n  const  onClickNext = ()=> {\n        const nextPage = page.number +1;\n        loadUsers(nextPage);\n    }\n  const  onClickPrevious = ()=> {\n        const nextPage = page.number -1;\n        loadUsers(nextPage);\n    }\n  const  loadUsers = async page => {\n      setLoadFailure(false)\n      try {\n       const response = await getUsers(page)   \n        setPage(response.data)\n      } catch (error) {\n          setLoadFailure(true)\n      }\n    }\n    const {content : users, last, first} =page;\n    return (\n        <div className=\"card\">\n            <h3 className=\"card-header text-center\">USERS</h3>\n            <div className=\"list-group-flush\">\n            {\n               users.map((user)=>{\n                    return(\n                        <UserListItem className=\"list-group-item list-group-item-action\" key={user.username} user={user}/> \n                        \n                    )\n               })\n           }\n\n            </div>\n            <div>\n                {first===false && <button className=\"btn btn-sm btn-light\" onClick={onClickPrevious}>Previous</button>} {/*burada !last yapabilirdik fakat hic data olmadigi durumunda response icinde last gelmez ve bu durum da button !last true olucagindan gozukur */}\n           \n                {last===false && <button className=\"btn btn-sm btn-light float-right\" onClick={onClickNext}>Next</button>} {/*burada !last yapabilirdik fakat hic data olmadigi durumunda response icinde last gelmez ve bu durum da button !last true olucagindan gozukur */}\n            </div>\n         {loadFailure && <div className=\"text-center text-danger\">Load Failure</div>}\n        </div>\n    )\n}\nconst mapStateToProps = (store) => { //reduxtaki state bilgisini componentimize props olarak alacagimiz fonksiyon yaziyoruz.Bu fonksiyou redux tarafi cagiriyor olucak.Parametre olan store objesi reduxtan geliyor\n    return {\n        username : store.username,\n        password : store.password\n    }\n}\nexport default connect(mapStateToProps)(UserList); ","/Users/omeruysal/Desktop/react-spring/frontend/src/components/UserListItem.js",[],"/Users/omeruysal/Desktop/react-spring/frontend/src/pages/LoginPageWithoutThunk.js",["138","139"],"import React, { Component } from 'react'\nimport Input from '../components/Input'\nimport { login } from '../api/apiCalls'\nimport ButtonWithProgress from '../components/ButtonWithProgress'\nimport { connect } from 'react-redux'\nimport {loginHandler, loginSuccess} from '../redux/authActions'\nimport { useEffect, useState } from \"react\";\n//import {Authentication} from '../shared/AuthenticationContext';\n\nconst LoginPageWithOutThunk = (props) => {\n\n    const [username, setUserName] = useState();\n    const [password, setPassword] = useState();\n    const [error, setError] = useState();\n\n    useEffect(()=> { //username veya passwordda herhangi bir degisim oldugunda erroru nulla cekeriz\n        setError(null);\n    },[username,password])\n  \n   \n\n    const   onClickLogin = async event => {\n        event.preventDefault();\n        const {history , dispatch} = props;\n        const credentials = { //login methodu icin objemizi olustururuz.Bu obje username ve sifre barindirir.\n            username,\n            password\n        }\n         setError(null) //login dendigi anda error uyarisi ekrandan silinmesi icin\n        \n        try {\n         const response = await login(credentials)\n           const authState={\n               ...response.data,\n               password\n           }\n          \n          dispatch(loginSuccess(authState));\n        history.push(\"/\")//Anasayfaya yonlendirme\n        } catch (apiError) {\n           \n        setError(apiError.response.data.message)\n           \n        }\n    }\n        const {pendingApiCall} =props;\n        const buttonEnabled = username && password; //username ve password bos ise butona basilmaz\n        return (\n            <div className=\"container\">\n                <form>\n                    <h1 className=\"text-center\">Login Without Thunk</h1>\n                    <Input label=\"Username\" name=\"username\" onChange={(event)=>{setUserName(event.target.value)}} />\n                    <Input label=\"Password\" name=\"password\" type=\"password\" onChange={event=>{setPassword(event.target.value)}} />\n                    {error ? <div className=\"alert alert-danger\" >\n                        {error}\n        </div> : \"\"}\n                    <div className=\"text-center\">\n                        <ButtonWithProgress\n                        onClick={onClickLogin}\n                        disabled={!buttonEnabled|| pendingApiCall}\n                        pendingApiCall={pendingApiCall}\n                        text={'Login'}\n                        />\n                    </div>\n                </form>\n\n            </div>\n        )\n    }\n\n\nexport default connect()(LoginPageWithOutThunk);","/Users/omeruysal/Desktop/react-spring/frontend/src/components/ProfileImageWithDefault.js",["140"],"import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport defaultPicture from '../assets/profile.png'\n//Ust componentten 2tane image temsili gelir. Ornek senaryolar; image null gelir newImage(tarayicidan yuklenen gorsel) undefined gelir(yani tarayicidan gorsel yuklenmemistir) bu durumda defaultPicture kullaniriz\n//Dbden image null gelir fakat newImage icin tarayicidan gorsel gonderilmistir. newImage gosterilir\n//Dbden image zaten olan bir resmin ismiyle gelir newImage(tarayicidan yukleme olmamistir) null gelir ve image gosterilir\n//Son senaryoda dbden resim ismiyle gelir newImage (tarayicidan gorsel yuklenmistir)  ismiyle gelir, bu durumda newImage gosterilir\nconst ProfileImageWithDefault =(props)=> {\n    const {image,tempimage} = props;\n     let imageSource =defaultPicture;\n                if(image){\n                    imageSource = 'images/'+image;\n                }\n    return (\n        <img  alt={`Profile`}\n         src={tempimage || imageSource}{...props}//props icinde gelen herseyi image'e paslariz\n         onError={event=>{ //errora dusunce calisacak kisim. Error olusunca default picture atamasi yapariz\n             event.target.src = defaultPicture;\n         }}\n         /> \n\n    )\n}\nexport default ProfileImageWithDefault;\n","/Users/omeruysal/Desktop/react-spring/frontend/src/components/TwitSubmit.js",["141","142"],"import {React,useEffect,useState} from 'react'\nimport { useSelector } from 'react-redux'\nimport ButtonWithProgress from '../components/ButtonWithProgress'\nimport ProfileImageWithDefault from './ProfileImageWithDefault';\nimport Input from '../components/Input'\nimport {postTwit, postTwitAttachment} from '../api/apiCalls'\nimport AutoUploadImage from './AutoUploadImage';\n\n\nexport default function TwitSubmit() {\n  const {image} =  useSelector((store)=>({image : store.image}));\n  const [twit, setTwit] = useState('')\n  const [newImage,setNewImage] = useState();\n  const [tempPending,setTempPending] = useState(false);\n  const [focused, setFocused] = useState(false);\n  const [errors, setErrors]= useState({});//error neden obje\n\n\n  useEffect(()=>{//tweet atilma alanina focustan cikinca hata ekrandan silinir tweet alanindaki deger silinir\n    if(!focused){\n        setTwit('')\n        setErrors({})\n        setNewImage(undefined)\n    }\n  },[focused])\n\n  useEffect(()=>{//tweette her degisiklikten sonra hata varsa silinir\n    setErrors({})\n  },[twit])\n\n  const onclickTwit = async () =>{\n     \n      const body = {\n          content : twit\n      }\n    try {\n        const response = await postTwit(body)\n        setFocused(false)//tweet attiktan sonra tweet area kapatmak icin\n    } catch (error) { //backendten aldigimiz hata ile kendi stateimizi guncelleriz\n        if(error.response.data.validationErrors){\n            setErrors(error.response.data.validationErrors)\n        }\n    }\n  }\n\n  const onChangeFile = (event) =>{\n    if(event.target.files.length<1){ //bu kontrolu yapmazsak su kisimda hata cikar; kullanici edit>choose file dedi fotograf secti tekrar choose file dedi ve fotograf secmeden cancel dedi.\n        return;\n    }\n\n    const file = event.target.files[0];//coklu resim olmadigimiz icin dizinin ilk elemani istedigimiz fotografi temsil eder\n    \n    const fileReader = new FileReader(); //resmi almak icin fileReader olusturuz\n    fileReader.onloadend = () =>{\n        setNewImage(fileReader.result)//resmi statimize set ederiz\n        uploadFile(file)\n    }\n    fileReader.readAsDataURL(file);//base64 stringi olusur\n}\n     \nconst uploadFile = async (file) =>{\n   \n   const attachment = new FormData();\n   attachment.append('file',file); //burada 'file' field ismi backendteki fonksiyonun parametresi ile ayni olmali\n    try {\n        setTempPending(true)\n        const response = await postTwitAttachment(attachment)\n        setTempPending(false)\n    } catch (error) {\n        \n    }\n}\n\n\n  let textAreaClass = 'form-control';\n  if(errors.content){\n      textAreaClass += ' is-invalid';\n  }\n\n    return (\n        <div className=\"card p-1 flex-row\">\n            <ProfileImageWithDefault image={image} width=\"32\" height=\"32\" className=\"rounded-circle mr-1\"/>\n            <div className=\"flex-fill\">\n                    <textarea className={textAreaClass} rows={focused ? '3':'1'} onFocus={()=>setFocused(true)}\n                    onChange={(event)=>setTwit(event.target.value)}\n                    value={twit}/> {/*value eklemezsek text areanin degerine mudahele demeyiz.Ornk:Twit yazip cancel dedikten sonra twit silinmez eger eklemezsek*/}\n                       <div className=\"invalid-feedback\">{errors.content}</div>\n                        {focused &&(\n        <>\n                               <Input type=\"file\"onChange={onChangeFile}/>\n                                {newImage &&  <AutoUploadImage image={newImage} uploading={tempPending}/>}\n                                <div className=\"text-right mt-1\">\n                                <ButtonWithProgress className=\"btn btn-primary\" disabled={tempPending} onClick={onclickTwit} text=\"Tweet at\"/>\n                                <ButtonWithProgress className=\"btn btn-light d-inline-flex ml-2\"   onClick={()=>setFocused(false)}\n                                        text={\n                                            <> \n                                            <span className=\"material-icons\">cancel</span>\n                                            Cancel\n                                            </>\n                                        }   \n                                    />\n                                </div>\n        </>\n                        )}\n                \n            </div>\n            \n            \n        </div>\n    )\n}\n","/Users/omeruysal/Desktop/react-spring/frontend/src/components/TwitFeed.js",[],"/Users/omeruysal/Desktop/react-spring/frontend/src/components/TwitView.js",[],"/Users/omeruysal/Desktop/react-spring/frontend/src/components/AutoUploadImage.js",["143"],"import React from 'react'\nimport './AutoUploadImage.css'\n\nexport default function AutoUploadImage({image,uploading}) {\n    return (\n        <div style={{position: 'relative'}}>\n            <img className=\"img-thumbnail\" src={image}></img>\n            <div className=\"overlay\" style={{opacity: uploading ? 1 : 0}}>\n                <div className=\"d-flex justify-content-center h-100\">\n                    <div className=\"spinner-border text-light m-auto\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n",["144","145"],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":26},{"ruleId":"150","severity":1,"message":"154","line":3,"column":10,"nodeType":"152","messageId":"153","endLine":3,"endColumn":15},{"ruleId":"150","severity":1,"message":"155","line":6,"column":23,"nodeType":"152","messageId":"153","endLine":6,"endColumn":35},{"ruleId":"156","severity":1,"message":"157","line":12,"column":1,"nodeType":"158","messageId":"159","endLine":13,"endColumn":2},{"ruleId":"150","severity":1,"message":"160","line":2,"column":8,"nodeType":"152","messageId":"153","endLine":2,"endColumn":19},{"ruleId":"150","severity":1,"message":"161","line":5,"column":8,"nodeType":"152","messageId":"153","endLine":5,"endColumn":29},{"ruleId":"150","severity":1,"message":"162","line":4,"column":10,"nodeType":"152","messageId":"153","endLine":4,"endColumn":19},{"ruleId":"150","severity":1,"message":"151","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":26},{"ruleId":"163","severity":1,"message":"164","line":15,"column":14,"nodeType":"165","messageId":"166","endLine":15,"endColumn":15,"fix":"167"},{"ruleId":"163","severity":1,"message":"164","line":29,"column":32,"nodeType":"165","messageId":"166","endLine":29,"endColumn":33,"fix":"168"},{"ruleId":"146","replacedBy":"169"},{"ruleId":"148","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":45,"column":7,"nodeType":"173","endLine":45,"endColumn":19,"suggestions":"174"},{"ruleId":"150","severity":1,"message":"151","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":26},{"ruleId":"150","severity":1,"message":"175","line":4,"column":31,"nodeType":"152","messageId":"153","endLine":4,"endColumn":42},{"ruleId":"150","severity":1,"message":"151","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":26},{"ruleId":"150","severity":1,"message":"176","line":6,"column":9,"nodeType":"152","messageId":"153","endLine":6,"endColumn":21},{"ruleId":"150","severity":1,"message":"162","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":19},{"ruleId":"150","severity":1,"message":"177","line":37,"column":15,"nodeType":"152","messageId":"153","endLine":37,"endColumn":23},{"ruleId":"150","severity":1,"message":"177","line":67,"column":15,"nodeType":"152","messageId":"153","endLine":67,"endColumn":23},{"ruleId":"178","severity":1,"message":"179","line":7,"column":13,"nodeType":"180","endLine":7,"endColumn":56},{"ruleId":"146","replacedBy":"181"},{"ruleId":"148","replacedBy":"182"},"no-native-reassign",["183"],"no-negated-in-lhs",["184"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'login' is defined but never used.","'loginSuccess' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'ApiProgress' is defined but never used.","'LoginPageWithoutThunk' is defined but never used.","'useParams' is defined but never used.","rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"185","text":"186"},{"range":"187","text":"186"},["183"],["184"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'displayName'. Either include it or remove the dependency array.","ArrayExpression",["188"],"'useSelector' is defined but never used.","'loginHandler' is defined but never used.","'response' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["183"],["184"],"no-global-assign","no-unsafe-negation",[383,384],"",[830,831],{"desc":"189","fix":"190"},"Update the dependencies array to be: [displayName, inEditMode]",{"range":"191","text":"192"},[2267,2279],"[displayName, inEditMode]"]